# -*- coding: utf-8 -*-
"""CryptoFBProphet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6WncjppPX3TYsj6wWkHbw8p2CLfQp6t
"""
import pandas as pd
import numpy as np 

# Reading the data
df = pd.read_csv("/content/drive/MyDrive/train.csv")
print(df.shape)
print(df.info())

train = df[df["Open"] == "Train"]
test = df[df["Open"] == "Test"]
print(train.shape)
print(test.shape)

train_array = df[train["Close"]]
print(train_array.shape)

test_array = df[test["Close"]]
print(test_array.shape)

df = pd.read_csv('/content/drive/MyDrive/train.csv')
df = pd.DataFrame(df)
df = df.rename(columns={'Date': 'ds', 'Open': 'y', 'Close': 'Cl'})

pip install fbprophet

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
#import plotly.express as px
#import folium
#import os
from prophet import Prophet

#import warnings
#warnings.filterwarnings('ignore')
#from IPython.core.display import HTML
import plotly.graph_objects as go
#pd.set_option('display.max_rows',20000, 'display.max_columns',100)

final = pd.DataFrame(columns=['cl','ds','yhat'])
df['ds'] = pd.to_datetime(df['ds'])
m = Prophet() #initializing model
m.fit(df) #fitting ..
future = m.make_future_dataframe(periods=60)
forecast = m.predict(future)

final = pd.concat([final, forecast], ignore_index=True)

final.head(10)

##  EXTRA

### Create future dates of 100 days
future_dates=m.make_future_dataframe(periods=365)

#  EXTRA

future_dates.tail()

# EXTRA

prediction=m.predict(future_dates)

# EXTRA

### plot the predicted projection
m.plot(prediction)

fig = go.Figure()

fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'],
                    mode='lines+markers',name='Predicted Cases',marker_color='Black'))
fig.add_trace(go.Scatter(x=df['ds'], y=df['y'],
                    mode='lines+markers',name='Actual Cases',marker_color='blue'))
fig.update_layout(
    title='Forecasting for Next 100 Days')
fig.show()

#EXTRA

# TESTing the accuracy
# CROSS VALIDATION

from fbprophet.diagnostics import cross_validation
df_cv = cross_validation(m, initial='730 days', period='180 days', horizon = '365 days')
df_cv.head()

from fbprophet.diagnostics import performance_metrics
df_p = performance_metrics(df_cv)
df_p.head()

from fbprophet.plot import plot_cross_validation_metric
fig = plot_cross_validation_metric(df_cv, metric='rmse')

